#!/usr/bin/env python

from os import path
from os import mkdir

from urllib.error import URLError

from datetime import date

import configparser
import argparse

from requiam_csv.create_csv import create_csv
from redata.commons.logger import log_setup

today = date.today()

co_filename = __file__
co_dir = path.dirname(co_filename)


if __name__ == '__main__':

    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Command-line driver for research themes management.')
    parser.add_argument('--execute', help='Boolean to force full execution (default is a "dry run"',
                        action='store_true')
    parser.add_argument('--ci', action='store_true', help='Flag for CI build tests')
    args = parser.parse_args()

    # Parse configuration from default.ini
    config = configparser.ConfigParser()
    config.read(path.join(co_dir, 'default.ini'))

    # Define logfile
    log_dir = config.get('global', 'log_dir')
    if not path.exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = config.get('global', 'logfile_prefix')
    logfile = f"{logfile_prefix}.{today.strftime('%Y-%m-%d')}.log"

    log = log_setup(log_dir, logfile)

    log.info("Started script_run")

    if args.execute:
        log.info("Full run execution")
    else:
        log.info("Dry run execution")

    # Get URL for Google Sheets
    url = config.get('global', 'url')

    # Define output filename
    outfile_dir  = config.get('global', 'outfile_dir')
    if args.ci:
        outfile_dir0 = path.join('requiam_csv', outfile_dir)
    else:
        outfile_dir0 = path.join(co_dir, outfile_dir)
    log.info(f"outfile_dir0: {outfile_dir0}")
    if not path.exists(outfile_dir0):
        mkdir(outfile_dir0)

    if args.execute:
        outfile = path.join(outfile_dir0, config.get('global', 'outfile'))
    else:
        outfile = path.join(outfile_dir0, config.get('global', 'outfile_dryrun'))

    try:
        create_csv(url, outfile, log)

        log.info("Completed script_run successfully!")
    except URLError:
        log.warning("URLError from create_csv !")
        log.warning("script_run: purports to die of unnatural causes !")
    except ValueError:
        log.warning("ValueError from create_csv !")
        log.warning("script_run: purports to die of unnatural causes !")
